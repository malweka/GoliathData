using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Linq;
using System.Runtime.Serialization;

namespace Goliath.Data.Mapping
{
    /// <summary>
    /// Entities Map and config model
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class MapConfig
    {
        #region Properties
        /// <summary>
        /// Gets or sets the entity maps.
        /// </summary>
        /// <value>The entity configs.</value>
        [DataMember]
        public EntityCollection EntityConfigs { get; set; }
        /// <summary>
        /// Gets or sets the complex types.
        /// </summary>
        /// <value>The complex types.</value>
        [DataMember]
        public ComplexTypeCollection ComplexTypes { get; set; }
        /// <summary>
        /// Gets or sets the generated by.
        /// </summary>
        /// <value>The generated by.</value>
        [DataMember]
        public string GeneratedBy { get; set; }

        /// <summary>
        /// Gets or sets the settings.
        /// </summary>
        /// <value>The settings.</value>
        [DataMember]
        public ProjectSettings Settings { get; set; }

        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="MapConfig"/> class.
        /// </summary>
        public MapConfig()
        {
            EntityConfigs = new EntityCollection();
            ComplexTypes = new ComplexTypeCollection();
            Settings = new ProjectSettings();
        }

        /// <summary>
        /// Saves the model into the specified stream.
        /// </summary>
        /// <param name="stream">The stream.</param>
        public void Save(Stream stream)
        {
            Save(stream, false);
        }

        /// <summary>
        /// Saves model into the specified file as xml.
        /// </summary>
        /// <param name="filename">The filename.</param>
        public void Save(string filename)
        {
            Save(filename, false);
        }

        /// <summary>
        /// Saves model into the specified file as xml.
        /// </summary>
        /// <param name="filename">The filename.</param>
        /// <param name="readable">if set to <c>true</c> the file will be formated to be readable by humans.</param>
        public void Save(string filename, bool readable)
        {
            using (var fileStream = File.Open(filename, FileMode.Create, FileAccess.Write))
            {
                Save(fileStream, readable);
            }
        }

        /// <summary>
        /// Saves the model into the specified stream.
        /// </summary>
        /// <param name="stream">The stream.</param>
        /// <param name="readable">if set to <c>true</c> the file will be formated to be readable by humans.</param>
        public void Save(Stream stream, bool readable)
        {
            using (XmlTextWriter xmlWriter = new XmlTextWriter(stream, Encoding.UTF8))
            {
                if (readable)
                    xmlWriter.Formatting = Formatting.Indented;
                else
                    xmlWriter.Formatting = Formatting.None;

                xmlWriter.WriteStartElement("goliath.data");
                xmlWriter.WriteStartAttribute("version");
                xmlWriter.WriteString(this.GetType().Assembly.GetName().Version.ToString());
                xmlWriter.WriteEndAttribute();

                xmlWriter.WriteStartElement("connectionString");
                xmlWriter.WriteString(Settings.ConnectionString);
                xmlWriter.WriteEndElement();

                xmlWriter.WriteStartElement("tablePrefixes");
                xmlWriter.WriteString(Settings.TablePrefixes);
                xmlWriter.WriteEndElement();

                xmlWriter.WriteStartElement("namespace");
                xmlWriter.WriteString(Settings.Namespace);
                xmlWriter.WriteEndElement();

                xmlWriter.WriteStartElement("baseModel");
                xmlWriter.WriteString(Settings.BaseModel);
                xmlWriter.WriteEndElement();

                if (!string.IsNullOrWhiteSpace(GeneratedBy))
                {
                    xmlWriter.WriteStartElement("generatedBy");
                    xmlWriter.WriteString(GeneratedBy);
                    xmlWriter.WriteEndElement();
                }

                xmlWriter.WriteStartElement("entities");
                foreach (var entity in EntityConfigs)
                {
                    xmlWriter.WriteStartElement("entity");

                    xmlWriter.WriteStartAttribute("name");
                    xmlWriter.WriteString(entity.Name);
                    xmlWriter.WriteEndAttribute();

                    if (!string.IsNullOrWhiteSpace(entity.Extends))
                    {
                        xmlWriter.WriteStartAttribute("extends");
                        xmlWriter.WriteString(entity.Extends);
                        xmlWriter.WriteEndAttribute();
                    }

                    if (entity.IsLinkTable)
                    {
                        xmlWriter.WriteStartAttribute("linkTable");
                        xmlWriter.WriteString(entity.IsLinkTable.ToString());
                        xmlWriter.WriteEndAttribute();
                    }

                    xmlWriter.WriteStartAttribute("assembly");
                    xmlWriter.WriteString(entity.AssemblyName);
                    xmlWriter.WriteEndAttribute();

                    xmlWriter.WriteStartAttribute("entityNamespace");
                    xmlWriter.WriteString(entity.Namespace);
                    xmlWriter.WriteEndAttribute();

                    xmlWriter.WriteStartAttribute("table");
                    xmlWriter.WriteString(entity.TableName);
                    xmlWriter.WriteEndAttribute();

                    xmlWriter.WriteStartAttribute("schema");
                    xmlWriter.WriteString(entity.SchemaName);
                    xmlWriter.WriteEndAttribute();

                    xmlWriter.WriteStartAttribute("tableAbbr");
                    xmlWriter.WriteString(entity.TableAbbreviation);
                    xmlWriter.WriteEndAttribute();

                    //primary key
                    if (entity.PrimaryKey != null)
                    {
                        xmlWriter.WriteStartElement("primaryKey");
                        WritePrimaryKey(xmlWriter, entity.PrimaryKey);
                        xmlWriter.WriteEndElement();
                    }

                    WriteTransformations(xmlWriter, entity.Properties);
                    xmlWriter.WriteStartElement("relations");
                    foreach (var rel in entity.Relations)
                    {
                        WriteTransformations(xmlWriter, rel);
                    }
                    xmlWriter.WriteEndElement();//relations
                    xmlWriter.WriteEndElement();//entity
                }
                xmlWriter.WriteEndElement();//end entities

                xmlWriter.WriteStartElement("complexTypes");
                foreach (var complex in ComplexTypes)
                {
                    xmlWriter.WriteStartElement("type");

                    xmlWriter.WriteStartAttribute("fullname");
                    xmlWriter.WriteString(complex.FullName);
                    xmlWriter.WriteEndAttribute();

                    xmlWriter.WriteStartAttribute("enum");
                    xmlWriter.WriteString(complex.IsEnum.ToString());
                    xmlWriter.WriteEndAttribute();

                    //xmlWriter.WriteStartAttribute("name");
                    //xmlWriter.WriteString(complex.Name);
                    //xmlWriter.WriteEndAttribute();

                    WriteTransformations(xmlWriter, complex.Properties);

                    xmlWriter.WriteEndElement();
                }
                xmlWriter.WriteEndElement();//end complexTypes

                xmlWriter.WriteEndElement();//end Goliath.Data
            }
        }

        /// <summary>
        /// Loads the specified filename.
        /// </summary>
        /// <param name="filename">The filename.</param>
        public void Load(string filename)
        {
            using (var filestream = File.Open(filename, FileMode.Open, FileAccess.Read))
            {
                Load(filestream);
            }
        }

        /// <summary>
        /// Loads the specified XML stream.
        /// </summary>
        /// <param name="xmlStream">The XML stream.</param>
        public void Load(Stream xmlStream)
        {
            using (XmlReader reader = XmlReader.Create(xmlStream, new XmlReaderSettings() { IgnoreComments = true, IgnoreWhitespace = true }))
            {
                MapReader mr = new MapReader();
                mr.Read(reader, this);
            }

            //return config;
        }

        /// <summary>
        /// Deserialize file and create a map model.
        /// </summary>
        /// <param name="filename">The filename.</param>
        /// <returns></returns>
        public static MapConfig Create(string filename)
        {
            using (var filestream = File.Open(filename, FileMode.Open, FileAccess.Read))
            {
                return Create(filestream);
            }
        }

        /// <summary>
        /// Deserialize file and create a map model.
        /// </summary>
        /// <param name="xmlStream">The XML stream.</param>
        /// <returns></returns>
        public static MapConfig Create(Stream xmlStream)
        {
            MapConfig config = new MapConfig();
            config.Load(xmlStream);
            return config;
        }
    }
}

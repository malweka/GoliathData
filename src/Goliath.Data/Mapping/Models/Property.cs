using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Runtime.Serialization;
using Goliath.Data.Utils;

namespace Goliath.Data.Mapping
{
    [Serializable]
    [DataContract]
    public class ConfigProperty : IMapModel, IEquatable<ConfigProperty>
    {
        public ConfigProperty()
        {
            IsNullable = true;
        }

        [DataMember]
        public string PropertyName { get; set; }
        [DataMember]
        public string ColumnName { get; set; }
        [DataMember]
        public Type ClrType { get; set; }
        [DataMember]
        public DbType DbType { get; set; }
        [DataMember]
        public string Errors { get; set; }
        [DataMember]
        public string SqlType { get; set; }
        [DataMember]
        public int Length { get; set; }
        [DataMember]
        public bool IsNullable { get; set; }
        [DataMember]
        public bool IsIdentity { get; set; }
        [DataMember]
        public bool IsAutoGenerated { get; set; }
        [DataMember]
        public bool IsUnique { get; set; }
        [DataMember]
        public bool IsPrimaryKey { get; set; }

        /// <summary>
        /// Returns a <see cref="System.String"/> that represents this instance.
        /// </summary>
        /// <returns>
        /// A <see cref="System.String"/> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return ColumnName;
        }

        #region IMapModel Members

        public string Name
        {
            get { return PropertyName; }
        }

        public string DbName
        {
            get { return ColumnName; }
        }

        #endregion

        #region IEquatable<ConfigProperty> Members

        public override int GetHashCode()
        {
            return PropertyName.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is ConfigProperty)
                return Equals((ConfigProperty)obj);
            return base.Equals(obj);
        }

        public bool Equals(ConfigProperty other)
        {
            if (other == null) return false;

            return ((PropertyName == other.PropertyName) && (ColumnName == other.ColumnName));
        }

        #endregion
    }

    [Serializable]
    [DataContract]
    public class Property : ConfigProperty
    {
        public Property() { }

        public Property(string columnName, string propertyName, DbType dbType)
        {
            ColumnName = columnName;
            PropertyName = propertyName;
            DbType = dbType;
        }

        [DataMember]
        public bool LazyLoad { get; set; }
        [DataMember]
        public bool IgnoreOnUpdate { get; set; }
        [DataMember]
        public bool IsComplexType { get; set; }
        [DataMember]
        public string ComplexTypeName { get; set; }
        [DataMember]
        public ConstraintType ConstraintType { get; set; }
        [DataMember]
        public string DefaultValue { get; set; }
        [DataMember]
        public string ConstraintName { get; set; }
        [DataMember]
        public int Precision { get; set; }
        [DataMember]
        public int Scale { get; set; }

        public string GetClrTypeAsString(EntityMap entity)
        {
            if (ClrType == null)
                return string.Empty;
            else
            {
                if (IsComplexType && (entity.Parent != null))
                {
                    var complexT = entity.Parent.ComplexTypes[ComplexTypeName];
                    if (complexT != null)
                    {
                        return complexT.FullName;
                    }
                }

                return ToPrintString(ClrType);
            }
        }

        public string PrintDataConvertMethod(string methodPrefix, EntityMap entity)
        {
            string tstring;

            if (IsComplexType && (entity.Parent != null))
            {
                var complexT = entity.Parent.ComplexTypes[ComplexTypeName];
                if ((complexT != null) && complexT.IsEnum)
                {
                    return string.Format("ReadEnum<{0}>", complexT.FullName);
                }
            }

            if (ClrType.IsGenericType && ClrType.GetGenericTypeDefinition() == typeof(Nullable<>))
            {
                var args = ClrType.GetGenericArguments();
                tstring = ToPrintString(args[0], false);
                methodPrefix += "Nullable";
            }
            else
                tstring = ToPrintString(ClrType);
            return string.Format("{0}{1}", methodPrefix, Goliath.Data.Utils.Inflector.Pascalize(tstring));
        }

        string ToPrintString(Type type, bool nullable = false)
        {
            string print = type.Name;

            if (type.IsPrimitive || print.Equals("String") || print.Equals("Boolean"))
            {
                switch (type.Name.ToLower())
                {
                    case "int32":
                        print = "int";
                        break;
                    case "int64":
                        print = "long";
                        break;
                    case "int16":
                        print = "short";
                        break;
                    case "boolean":
                        print = "bool";
                        break;
                    case "single":
                        print = "float";
                        break;
                    default:
                        print = type.Name.ToLower();
                        break;
                }
            }

            else if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>))
            {
                var args = type.GetGenericArguments();
                return ToPrintString(args[0], true);
            }

            if (nullable)
                return string.Format("{0}?", print);

            return print;
        }

        /// <summary>
        /// Performs an implicit conversion from <see cref="Goliath.Data.Mapping.PrimaryKeyProperty"/> to <see cref="Goliath.Data.Mapping.Property"/>.
        /// </summary>
        /// <param name="pkProperty">The pk property.</param>
        /// <returns>
        /// The result of the conversion.
        /// </returns>
        public static implicit operator Property(PrimaryKeyProperty pkProperty)
        {
            return pkProperty.Key;
        }

        public virtual string ToString(Providers.SqlMapper sqlMapper)
        {
            StringBuilder sqlSb = new StringBuilder(ColumnName);
            var sType = sqlMapper.TranslateToSqlStringType(this) ?? SqlType;
            sqlSb.AppendFormat(" {0}", sType);

            //if (this.IsPrimaryKey)
            //{
            //    sqlSb.AppendFormat(" {0}", sqlMapper.PrimarykeySql().ToUpper());
            //}
            if (!string.IsNullOrWhiteSpace(DefaultValue))
            {
                string dVal = DefaultValue;
                var sfunc = sqlMapper.GetFunction(DefaultValue);
                if (sfunc != null)
                    dVal = sfunc.ToString();
                sqlSb.AppendFormat(" DEFAULT({0})", dVal);
            }
            if (!IsNullable)
            {
                sqlSb.Append(" NOT NULL");
            }
            
            return sqlSb.ToString();
        }
    }

}

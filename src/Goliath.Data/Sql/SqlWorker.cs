using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.Common;
using Goliath.Data.DataAccess;
using Goliath.Data.Providers;
using Goliath.Data.Diagnostics;
using Goliath.Data.Mapping;


namespace Goliath.Data.Sql
{
    public sealed class SqlWorker : ISqlWorker
    {
        SqlMapper sqlMapper;
        GetSetStore getSetStore;
        static ILogger logger;

        static SqlWorker()
        {
            logger = Logger.GetLogger(typeof(SqlWorker));
        }

        internal SqlWorker(SqlMapper sqlMapper, GetSetStore getSetStore)
        {
            if (sqlMapper == null)
                throw new ArgumentNullException("sqlMapper");
            if (getSetStore == null)
                throw new ArgumentNullException("getSetStore");

            this.sqlMapper = sqlMapper;
            this.getSetStore = getSetStore;
        }

        internal static SelectSqlBuilder BuildSelectSql(EntityMap entityMap, SqlMapper sqlMapper, IDbAccess dataAccess, PropertyQueryParam[] filters, out ICollection<DbParameter> dbParams)
        {
            SelectSqlBuilder queryBuilder = new SelectSqlBuilder(sqlMapper, entityMap);
            if ((filters != null) && (filters.Length > 0))
            {
                for (int i = 0; i < filters.Length; i++)
                {
                    var prop = entityMap[filters[i].PropertyName];
                    if (prop == null)
                        throw new MappingException(string.Format("Property {0} not found in mapped entity {1}", filters[i].PropertyName, entityMap.FullName));

                    filters[i].SetParameterName(prop.ColumnName, entityMap.TableAlias);
                    WhereStatement w = new WhereStatement(prop.ColumnName)
                    {
                        Operator = filters[i].ComparisonOperator,
                        PostOperator = filters[i].PostOperator,
                        RightOperand = new StringOperand(sqlMapper.CreateParameterName(ParameterNameBuilderHelper.ColumnQueryName(prop.ColumnName, entityMap.TableAlias)))
                    };
                    queryBuilder.Where(w);
                }

                dbParams = dataAccess.CreateParameters(filters);
            }
            else
                dbParams = new DbParameter[] { };

            return queryBuilder;
        }

        internal Dictionary<string, KeyGenOperationInfo> GeneratePksForInsert(object entity, EntityMap entityMap, EntityGetSetInfo getSetInfo)
        {
            Dictionary<string, KeyGenOperationInfo> keygenerationOperations = new Dictionary<string, KeyGenOperationInfo>();

            if (entityMap.PrimaryKey != null)
            {
                foreach (var pk in entityMap.PrimaryKey.Keys)
                {
                    if (pk.KeyGenerator == null)
                        throw new MappingException(string.Format("No key generator specified for {0} for mapped entity {1}", pk.Key.PropertyName, entityMap.FullName));
                    if (!pk.Key.IsAutoGenerated)
                    {
                        PropInfo pInfo;
                        if (getSetInfo.Properties.TryGetValue(pk.Key.PropertyName, out pInfo))
                        {
                            SqlOperationPriority priority;
                            var id = pk.KeyGenerator.GenerateKey(entityMap, pk.Key.PropertyName, out priority);
                            pInfo.Setter(entity, id);
                        }
                    }
                    else
                    {
                        SqlOperationPriority priority;
                        string genText = pk.KeyGenerator.GenerateKey(entityMap, pk.Key.PropertyName, out priority).ToString();
                        SqlOperationInfo genOper = new SqlOperationInfo() { CommandType = SqlStatementType.Select, Parameters = new QueryParam[] { }, SqlText = genText };
                        var genParamName = ParameterNameBuilderHelper.ColumnQueryName(pk.Key.ColumnName, entityMap.TableAlias);

                        PropInfo pInfo;
                        if (getSetInfo.Properties.TryGetValue(pk.Key.PropertyName, out pInfo))
                        {
                            KeyGenOperationInfo genKeyOper = new KeyGenOperationInfo()
                            {
                                Entity = entity,
                                PropertyName = pk.Key.PropertyName,
                                PropertyType = pInfo.PropertType,
                                Operation = genOper,
                                Priority = priority
                            };

                            keygenerationOperations.Add(genParamName, genKeyOper);
                        }
                    }
                }
            }

            return keygenerationOperations;
        }

        public BatchSqlOperation BuildInsertSql<TEntity>(EntityMap entityMap, TEntity entity, bool recursive)
        {
            BatchSqlOperation operation = new BatchSqlOperation() { Priority = SqlOperationPriority.Medium };
            Dictionary<string, PropertyQueryParam> neededParams = new Dictionary<string, PropertyQueryParam>();
            BuildInsertSql(entity, entityMap, typeof(TEntity), null, null, null, operation, recursive, 0, -1);

            return operation;
        }

        void BuildInsertSql
        (
            object entity,
            EntityMap entityMap,
            Type entityType,

            object parentEntity,
            EntityMap parentEntityMap,
            Type parentEntityType,
            BatchSqlOperation batchOperation,

            bool recursive,
            int recursionLevel = 0,
            int rootRecursionLevel = 0
         )
        {
            EntityMap baseEntMap = null;
            Dictionary<string, KeyGenOperationInfo> keygenerationOperations = new Dictionary<string, KeyGenOperationInfo>();
            bool isSubclass = entityMap.IsSubClass;
            EntityGetSetInfo entGetSets;
            InsertSqlBuilder baseInsertSqlBuilder = null;
            BatchSqlOperation operation = null;
            //int level = recursionLevel;

            if (!getSetStore.TryGetValue(entityType, out entGetSets))
            {
                entGetSets = new EntityGetSetInfo(entityType);
                entGetSets.Load(entityMap);
                getSetStore.Add(entityType, entGetSets);
            }

            if (isSubclass)
            {
                //get base class first
                baseEntMap = entityMap.Parent.GetEntityMap(entityMap.Extends);
                baseInsertSqlBuilder = new InsertSqlBuilder(sqlMapper, baseEntMap, recursionLevel, rootRecursionLevel);
                keygenerationOperations = GeneratePksForInsert(entity, baseEntMap, entGetSets);

                var baseParamDictionary = InsertSqlBuilder.BuildQueryParams(entity, entGetSets, baseEntMap, getSetStore, recursionLevel, rootRecursionLevel);
                SqlOperationInfo baseClassOperation = new SqlOperationInfo() { CommandType = SqlStatementType.Insert };
                baseClassOperation.SqlText = baseInsertSqlBuilder.ToSqlString();
                baseClassOperation.Parameters = baseParamDictionary.Values;
                operation = new BatchSqlOperation() { Priority = SqlOperationPriority.Medium };

                batchOperation.Operations.Add(baseClassOperation);
                batchOperation.SubOperations.Add(operation);
                //level++;
            }
            else
            {
                keygenerationOperations = GeneratePksForInsert(entity, entityMap, entGetSets);
                operation = batchOperation;
            }

            InsertSqlBuilder entInsertSqlBuilder = new InsertSqlBuilder(sqlMapper, entityMap, recursionLevel, rootRecursionLevel);

            var paramDictionary = InsertSqlBuilder.BuildQueryParams(entity, entGetSets, entityMap, getSetStore, recursionLevel, rootRecursionLevel);
            SqlOperationInfo operationInfo = new SqlOperationInfo() { CommandType = SqlStatementType.Insert };
            operationInfo.SqlText = entInsertSqlBuilder.ToSqlString();
            operationInfo.Parameters = paramDictionary.Values;
            operation.Operations.Add(operationInfo);

            if (keygenerationOperations.Count > 0)
            {
                operation.KeyGenerationOperations = keygenerationOperations;
                operation.Priority = SqlOperationPriority.High;
            }

            if (recursive)
            {
                rootRecursionLevel++;
                foreach (var rel in entityMap.Relations)
                {
                    if (rel.RelationType == RelationshipType.ManyToOne)
                        continue;

                    else if (rel.RelationType == RelationshipType.OneToMany)
                    {
                        PropInfo pInfo;

                        if (entGetSets.Properties.TryGetValue(rel.PropertyName, out pInfo))
                        {
                            var colGetter = pInfo.Getter(entity);

                            if ((colGetter != null) && (colGetter is System.Collections.IEnumerable))
                            {
                                var list = (System.Collections.IEnumerable)colGetter;
                                foreach (var o in list)
                                {
                                    if (o == null)
                                        continue;
                                    //get type
                                    var reltype = o.GetType();
                                    //get map
                                    var relmap = entityMap.Parent.GetEntityMap(reltype.FullName);
                                    BatchSqlOperation relOper = new BatchSqlOperation() { Priority = SqlOperationPriority.Low };
                                    operation.SubOperations.Add(relOper);
                                    BuildInsertSql(o, relmap, reltype, entity, entityMap, entityType, relOper, true, ++recursionLevel, rootRecursionLevel);
                                }
                            }
                        }
                    }
                    else if (rel.RelationType == RelationshipType.ManyToMany)
                    {
                    }
                }
                if (isSubclass)
                {
                    foreach (var rel in baseEntMap.Relations)
                    {
                    }
                }
            }
        }

    }
}

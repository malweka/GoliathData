@using Goliath.Data.Mapping
@using Goliath.Data.Diagnostics
@using Goliath.Data.Providers.SqlServer
/**************************************************	
*	Auto generated - CRUD Stored Procedure 1.0.0
***************************************************/
@{
	ILogger logger = Logger.GetLogger(this.GetType());
	var sqlMapper = new Mssq2008Dialect();
	string _extends = string.Empty;
	List<Property> cols = new List<Property>();
	if(!string.IsNullOrWhiteSpace(Model.Extends))
		_extends = string.Format(": {0}", Model.Extends);
}

IF OBJECT_ID('@(Model.Name)_Insert') IS NOT NULL
	BEGIN
		DROP PROC @(Model.Name)_Insert;
	END
GO

IF OBJECT_ID('@(Model.Name)_Update') IS NOT NULL
	BEGIN
		DROP PROC @(Model.Name)_Update;
	END

IF OBJECT_ID('@(Model.Name)_Delete') IS NOT NULL
	BEGIN
		DROP PROC @(Model.Name)_Delete;
	END
GO

CREATE PROC @(Model.Name)_Insert
@{
	if(Model.PrimaryKey != null)
	{
		foreach(var k in Model.PrimaryKey.Keys)
		{
			Property p = k;
			if(p.IsAutoGenerated)
				continue;
			cols.Add(p);
		}
	}

	foreach(var p in Model.Properties)
	{ 
		if(p.IsAutoGenerated)
				continue;

		cols.Add(p);
	}

	foreach(var p in Model.Relations)
	{
		if(p.IsAutoGenerated)
				continue;

		if((p.RelationType == RelationshipType.OneToMany) && (p.SqlType != null))
			cols.Add(p);
	}
	for(int i=0;i<cols.Count;i++)
	{
		string txt = string.Format("@{0} {1}", cols[i].ColumnName, sqlMapper.PrintSqlTypeString(cols[i]).ToUpper()); 
		if(i != (cols.Count - 1))
			txt = txt+", ";
	@:@(txt)
	}
}
AS
BEGIN
	INSERT INTO [@(Model.TableName)]
	(
@{
	for(int i=0;i<cols.Count;i++)
	{
		string txt = string.Format("[{0}]", cols[i].ColumnName);
		if(i != (cols.Count - 1))
			txt = txt+", ";
		@:@(txt)
	}
}
	)
	VALUES
	(
@{
	for(int i=0;i<cols.Count;i++)
	{
		string txt = string.Format("@{0}", cols[i].ColumnName);
		if(i != (cols.Count - 1))
			txt = txt+", ";
		@:@(txt)
	}
}
	);
END
GO

CREATE PROC @(Model.Name)_Update
@{
	cols.Clear();
	if(Model.PrimaryKey != null)
	{
		foreach(var k in Model.PrimaryKey.Keys)
		{
			Property p = k;
			cols.Add(p);
		}
	}

	foreach(var p in Model.Properties)
	{ 
		if(p.IsAutoGenerated || p.IgnoreOnUpdate)
			continue;

		cols.Add(p);
	}

	foreach(var p in Model.Relations)
	{
		if(p.IsAutoGenerated || p.IgnoreOnUpdate)
			continue;

		if((p.RelationType == RelationshipType.OneToMany) && (p.SqlType != null))
			cols.Add(p);
	}
	for(int i=0;i<cols.Count;i++)
	{
		string txt = string.Format("@{0} {1}", cols[i].ColumnName, sqlMapper.PrintSqlTypeString(cols[i]).ToUpper()); 
		if(i != (cols.Count - 1))
			txt = txt+", ";
	@:@(txt)
	}
}
AS
BEGIN
	UPDATE [@(Model.TableName)] SET
@{
	for(int i=0;i<cols.Count;i++)
	{
		if(cols[i].IsAutoGenerated || cols[i].IgnoreOnUpdate)
			continue;

		string txt = string.Format("[{0}] = @{0}", cols[i].ColumnName);
		if(i != (cols.Count - 1))
			txt = txt+", ";
		@:@(txt)
	}
	if(Model.PrimaryKey != null)
	{
		for(var i=0;i< Model.PrimaryKey.Keys.Count;i++)
		{
			Property p = Model.PrimaryKey.Keys[i];
			string smx = "";
			if(i == (Model.PrimaryKey.Keys.Count - 1))
				smx = "; ";
			if(i==0)
			{
		@:WHERE [@(p.ColumnName)] = @@@(p.ColumnName)@(smx)
			}
			else
			{
		@:AND [@(p.ColumnName)] = @@@(p.ColumnName)@(smx)
			}
		}
	}
	else
	{
		@:THIS TABLE HAS NO PRIMARY KEY. YOU SHOULD REMOVE THIS STORE PROCEDURE.
	}
}
END
GO



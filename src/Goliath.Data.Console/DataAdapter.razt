using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using System.Linq;

@{
	string nspace = Model.Namespace;
	string className = Model.Name + "DataAdapter";
	List<string> selectColumns = new List<string>();
	List<string> insertColumns = new List<string>();
	List<string> parameters = new List<string>();


	foreach(var p in Model.Properties)
	{
		selectColumns.Add(p.ColumnName);
		if(p.IsAutoGenerated || p.IsIdentity) continue;
		insertColumns.Add(p.ColumnName);
		parameters.Add("@"+p.PropertyName);
	}
}

namespace @nspace
{
	public partial class @className : DataAccessAdapter<@(Model.Name)>
	{
		const string InsertSqlConst = @@"INSERT INTO @(Model.TableName)(@(string.Join(",", insertColumns)))
									VALUES(@(string.Join(",", parameters)))";
		const string SelectSqlConst = @@"SELECT @(string.Join(",", selectColumns)) FROM @(Model.TableName)";
		
		public @(className)(IDbAccess dataAccess):base(dataAccess)
		{
		}

		#region DataAccessAdapter<@(Model.Name)> implementation 

		protected override string InsertSql { get{ return InsertSqlConst; } }

		protected override string SelectSql { get{ return SelectSqlConst; } }

		protected override string UpdateSql 
		{ 
			get
			{ 
			  StringBuilder sqlBld = new StringBuilder("UPDATE @(Model.TableName) SET ");
			  @{
				int cx = 0;
				foreach(var p in Model.Properties)
				{
					cx+=1;
					if(p.IsAutoGenerated || p.IsIdentity) continue;
			  @:sqlBld.Append(string.Format("{0}=@@{0}", "@(p.ColumnName)"));
					if(cx != Model.Properties.Count)
					{
			  @:sqlBld.Append(", ");
					}
				}
			  }
			  return sqlBld.ToString();
			} 
		}

		protected override DbParameter[] CreateParameters(@(Model.Name) entity)
		{
			DbParameter[] parameters = new DbParameter[]
			{ 
				@{
					foreach(var p in Model.Properties)
					{
						if(p.IsAutoGenerated || p.IsIdentity) continue;
				@:dataAccess.CreateParameter(@(Model.Name).PropertyNames.@(p.PropertyName), entity.@(p.PropertyName)),
					}
				}
			};
			return parameters;
		}

		protected override @(Model.Name) CreateEntityFromReader(DbDataReader reader)
		{
			@(Model.Name) entity = new @(Model.Name)();
			@{
				foreach(var p in Model.Properties)
				{
			@:entity.@(p.PropertyName) =  reader.@(p.PrintDataConvertMethod("Read", Model))("@(p.ColumnName)");
				}
			}
			return entity;
		}

		public override int Update(@(Model.Name) entity)
		{
			@{
			@:return Update(entity, new QueryFilter[]{ new QueryFilter("(pk.ColumnName)", entity.(pk.PropertyName)) });
			}			
		}

		public override int UpdateBatch(IEnumerable<@(Model.Name)> list)
		{
			 try
			 {
				int executed = 0;
				using (DbConnection connection = dataAccess.CreateNewConnection())
				{
				   lock (dataAccess.LockObject)
				   {
					  using (DbTransaction dbTrans = connection.BeginTransaction())
					  {
						 foreach (var entity in list)
						 {						 
						 @{							
							@:executed += ExecuteUpdate(connection, entity, new QueryFilter[]{ new QueryFilter("(pk.ColumnName)", entity.(pk.PropertyName)) });
						  }							
						 }
						 dbTrans.Commit();
					  }
				   }
				}
				return executed;
			 }
			 catch (Exception ex)
			 {
				throw new DataAccessException("Couldn't save data into data store", ex);
			 }
		}

		public override @(Model.Name) SelectById(object id)
		{
			
		}  

		#endregion
	}
}


using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace @(Model.Settings.Namespace)
{
	public partial class DataAccessAdapterFactory
	{
		readonly Dictionary<Type, Func<object>> adapters;
		IDbAccess dataAccess;

		public DataAccessAdapterFactory(IDbAccess dataAccess)
		{
			if(dataAccess == null)
				throw new ArgumentNullException("dataAccess");
			this.dataAccess = dataAccess;

			adapters = new Dictionary<Type, Func<object>>()
			{
				@{
					foreach(var ent in Model.EntityConfigs)
					{
				@:{typeof(@(ent.Name)), ()=>{return new @(ent.Name)DataAdapter(dataAccess);}},
					}
				}
			};
		}

		public DataAccessAdapter<T> CreateAdapter<T>() where T : class
		{
			Type t = typeof(T);
			Func<object> factMethod;
			if(adapters.TryGetValue(t, out factMethod))
			{
				return (DataAccessAdapter<T>)factMethod.Invoke();
			}

			return null;
		}
	}

	public static partial class DataAccessAdapterExtensions
	{
		@{
			foreach(var ent in Model.EntityConfigs)
			{
				var props = ent.Properties.Where(t=>t.IsUnique && !t.IsPrimaryKey);
				foreach(var p in props)
				{
		@:public static @(ent.Name) FindBy@(p.PropertyName)(this DataAccessAdapter<@(ent.Name)> adapter, @(p.GetClrTypeAsString(ent)) value)
		@:{
			@:return adapter.FindOne(new QueryFilter("@(p.ColumnName)", value));
		@:}
				}
			}
		}
	}
}

